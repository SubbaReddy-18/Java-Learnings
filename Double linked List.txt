import java.util.*;
import java.lang.*;
import java.io.*;
class Node {
    int data;
    Node next;
    Node back;
    Node(int data) {
        this.data = data;
        this.next = null;
        this.back = null;

    }
    Node(int data, Node next, Node back) {
        this.data = data;
        this.next = next;
        this.back = back;
    }
}

class DoubleLinkedList
{
    private static void print(Node head) {
        while (head != null) {
            System.out.print(head.data + " ");
            head = head.next;
        }
        System.out.println();
    }
    //converting array into Double Linked List
    private static Node convertArr2DLL(int a[]) {
        if (a.length == 0) {
            return null;
        }
        Node head = new Node(a[0]);
        Node prev = head;
        for (int i = 1; i < a.length; i++) {
            Node temp = new Node(a[i]);
            prev.next = temp;
            temp.back = prev;
            prev = temp;
        }
        return head;
    }

    //Delete the head in Double linked List.
    private static Node deleteHead(Node head) {
        if (head == null || head.next == null) {
            return null;
        }
        Node prev = head;
        head = head.next;
        head.back = null;
        prev.back = null;
        return head;
    }

    //delete the tail 
    private static Node deleteTail(Node head) {
        if (head == null || head.next == null) {
            return null;
        }
        Node tail = head;
        while (tail.next != null) {
            tail = tail.next;
        }
        Node prev = tail.back;

        prev.next = null;
        tail.back = null;
        return head;
    }

    //delete Kth Node in DLL
    private static Node deleteKthNode(Node head, int k) {
        if (head == null) {
            return null;
        }
        int count = 0;
        Node kNode = head;
        while (kNode != null) {
            count++;
            if (count == k) break;
            kNode = kNode.next;
        }
        if (kNode == null) {
            return head;
        }
        Node prev = kNode.back;
        Node front = kNode.next;
        if (prev == null && front == null) {
            return null;
        }
        else if (prev == null) {
            head = head.next;
            head.back = null;
        }
        else if (front == null) {
            prev.next = null;
        } else {
            prev.next = front;
            front.back = prev;
        }

        kNode.next = null;
        kNode.back = null;
        return head;

    }

    //Removing the node from DLL
    private static void removeNode(Node temp) {
        if (temp == null) {
            return;
        }
        Node prev = temp.back;
        Node front = temp.next;
        if (front == null) {
            if (prev != null) {
                prev.next = null;
            }
        } else {
            if (prev != null) {
                prev.next = front;
            }
            front.back = prev;
        }
        temp.next = null;
        temp.back = null;

    }

    //Inserting Node before head;
    private static Node insertNodeBeforeHead(Node head, int val) {
        Node newNode = new Node(val, head, null);
        head.back = newNode;
        return newNode;

    }
    //Inserting Node Before Tail
    private static Node insertNodeBeforeTail(Node head, int val) {
        Node tail = head;
        while (tail.next != null) {
            tail = tail.next;

        }

        Node prev = tail.back;
        Node newNode = new Node(val, tail, prev);
        prev.next = newNode;
        tail.back = newNode;
        return head;
    }

    //Insert Node before Kth Element

    private static Node insertNodeBeforeKthElement(Node head, int k, int val) {
        if (k == 1) {
            return insertNodeBeforeHead(head, val);
        }
        Node temp = head;
        int count = 0;
        while (temp != null) {
            count++;
            if (count == k) break;
            temp = temp.next;
        }
        Node prev = temp.back;
        Node newNode = new Node(val, temp, prev);
        prev.next = newNode;
        temp.back = newNode;
        return head;
    }

    //inserting Before Node
    private static void insertNodeBeforeNode(Node node, int val) {
        Node prev = node.back;
        Node newNode = new Node(val, node, prev);
        prev.next = newNode;
        node.back = newNode;
    }


    public static void main(String[] args) throws java.lang.Exception
    {
        int a[] = {
            12,
            5,
            6,
            8
        };
        Node head = convertArr2DLL(a);
        //head=deleteHead(head);
        //head = deleteTail(head);
        //head=deleteKthNode(head,1);
        //removeNode(head.next);
        //head=insertNodeBeforeHead(head,100);
        //head = insertNodeBeforeTail(head, 99);
        //head=insertNodeBeforeKthElement(head,4,45);
        insertNodeBeforeNode(head.next, 67);
        print(head);

    }
}